/**
 * RESTAPI SDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorResponseError } from '../errors/errorResponseError';
import {
  ApiRestV2ConnectionAddtableRequest,
  apiRestV2ConnectionAddtableRequestSchema,
} from '../models/apiRestV2ConnectionAddtableRequest';
import {
  ApiRestV2ConnectionCreateRequest,
  apiRestV2ConnectionCreateRequestSchema,
} from '../models/apiRestV2ConnectionCreateRequest';
import {
  ApiRestV2ConnectionRemovetableRequest,
  apiRestV2ConnectionRemovetableRequestSchema,
} from '../models/apiRestV2ConnectionRemovetableRequest';
import {
  ApiRestV2ConnectionSearchRequest,
  apiRestV2ConnectionSearchRequestSchema,
} from '../models/apiRestV2ConnectionSearchRequest';
import {
  ApiRestV2ConnectionUpdateRequest,
  apiRestV2ConnectionUpdateRequestSchema,
} from '../models/apiRestV2ConnectionUpdateRequest';
import {
  ConnectionResponse,
  connectionResponseSchema,
} from '../models/connectionResponse';
import {
  CreateConnectionResponse,
  createConnectionResponseSchema,
} from '../models/createConnectionResponse';
import { array, boolean, string } from '../schema';
import { BaseController } from './baseController';

export class ConnectionController extends BaseController {
  /**
   * To get the details of a specific connection use this endpoint
   *
   * @param id The GUID of the connection to query
   * @return Response from the API call
   */
  async getConnection(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConnectionResponse>> {
    const req = this.createRequest('GET', '/api/rest/v2/connection');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.query('id', mapped.id);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(connectionResponseSchema, requestOptions);
  }

  /**
   * To programmatically create a connection in the ThoughtSpot system use this API endpoint.
   *
   * @param body
   * @return Response from the API call
   */
  async createConnection(
    body: ApiRestV2ConnectionCreateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CreateConnectionResponse>> {
    const req = this.createRequest('POST', '/api/rest/v2/connection/create');
    const mapped = req.prepareArgs({
      body: [body, apiRestV2ConnectionCreateRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(createConnectionResponseSchema, requestOptions);
  }

  /**
   * You can use this endpoint to programmatically modify an existing connection
   *
   * @param body
   * @return Response from the API call
   */
  async updateConnection(
    body: ApiRestV2ConnectionUpdateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('PUT', '/api/rest/v2/connection/update');
    const mapped = req.prepareArgs({
      body: [body, apiRestV2ConnectionUpdateRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To remove a connection from the ThoughtSpot system, use this endpoint.
   *
   * @param id A JSON array of GUIDs of the connection
   * @return Response from the API call
   */
  async deleteConnection(
    id: string[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('DELETE', '/api/rest/v2/connection/delete');
    const mapped = req.prepareArgs({ id: [id, array(string())] });
    req.query('id', mapped.id);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically add table to an existing connection, use this endpoint
   *
   * @param body
   * @return Response from the API call
   */
  async addTableToConnection(
    body: ApiRestV2ConnectionAddtableRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('PUT', '/api/rest/v2/connection/addtable');
    const mapped = req.prepareArgs({
      body: [body, apiRestV2ConnectionAddtableRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically remove a table from a connection, use API endpoint.
   *
   * @param body
   * @return Response from the API call
   */
  async removeTableFromConnection(
    body: ApiRestV2ConnectionRemovetableRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest(
      'PUT',
      '/api/rest/v2/connection/removetable'
    );
    const mapped = req.prepareArgs({
      body: [body, apiRestV2ConnectionRemovetableRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To get the details of a specific connection or all connections in the ThoughtSpot system use this
   * end point.
   *
   * @param body
   * @return Response from the API call
   */
  async searchConnection(
    body: ApiRestV2ConnectionSearchRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConnectionResponse[]>> {
    const req = this.createRequest('POST', '/api/rest/v2/connection/search');
    const mapped = req.prepareArgs({
      body: [body, apiRestV2ConnectionSearchRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(array(connectionResponseSchema), requestOptions);
  }
}
