# -*- coding: utf-8 -*-

"""
restapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from restapisdk.api_helper import APIHelper
from restapisdk.models.group_name_and_id_input import GroupNameAndIDInput


class TspublicRestV2UserCreateRequest(object):

    """Implementation of the 'Tspublic Rest V2 User Create Request' model.

    TODO: type model description here.

    Attributes:
        name (string): Name of the user account. The username string must be
            unique.
        display_name (string): A display name string for the user, usually
            their first and last name.
        visibility (CreateUserVisibilityEnum): Visibility of the user. The
            visibility attribute is set to DEFAULT when creating a user.   
            The DEFAULT attribute makes a user visible to other users and user
            groups, and thus allows them to share objects.
        mail (string): Email id associated with the user account
        password (string): Password for the user account.
        org_ids (list of int): This is applicable only if organization feature
            is enabled in the cluster.    Array of org identifiers. If no
            value is provided, the organization associated with the login
            session is considered.
        groups (list of GroupNameAndIDInput): A JSON array of group names or
            GUIDs or both. When both are given then id is considered
        state (CreateUserStateEnum): Status of user account. acitve or
            inactive.
        notify_on_share (CreateUserNotifyOnShareEnum): User preference for
            receiving email notifications when another ThoughtSpot user shares
            answers or pinboards.
        show_walk_me (CreateUserShowWalkMeEnum): The user preference for
            revisiting the onboarding experience.
        analyst_onboarding_complete (CreateUserAnalystOnboardingCompleteEnum):
            ThoughtSpot provides an interactive guided walkthrough to onboard
            new users. The onboarding experience leads users through a set of
            actions to help users get started and accomplish their tasks
            quickly.    The users can turn off the Onboarding experience and
            access it again when they need assistance with the ThoughtSpot
            UI.
        mtype (CreateUserTypeEnum): Type of user. LOCAL_USER indicates that
            the user is created locally in the ThoughtSpot system.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "display_name": 'displayName',
        "password": 'password',
        "visibility": 'visibility',
        "mail": 'mail',
        "org_ids": 'orgIds',
        "groups": 'groups',
        "state": 'state',
        "notify_on_share": 'notifyOnShare',
        "show_walk_me": 'showWalkMe',
        "analyst_onboarding_complete": 'analystOnboardingComplete',
        "mtype": 'type'
    }

    _optionals = [
        'visibility',
        'mail',
        'org_ids',
        'groups',
        'state',
        'notify_on_share',
        'show_walk_me',
        'analyst_onboarding_complete',
        'mtype',
    ]

    def __init__(self,
                 name=None,
                 display_name=None,
                 password=None,
                 visibility='DEFAULT',
                 mail=APIHelper.SKIP,
                 org_ids=APIHelper.SKIP,
                 groups=APIHelper.SKIP,
                 state='ACTIVE',
                 notify_on_share='true',
                 show_walk_me='true',
                 analyst_onboarding_complete='false',
                 mtype='LOCAL_USER'):
        """Constructor for the TspublicRestV2UserCreateRequest class"""

        # Initialize members of the class
        self.name = name 
        self.display_name = display_name 
        self.visibility = visibility 
        if mail is not APIHelper.SKIP:
            self.mail = mail 
        self.password = password 
        if org_ids is not APIHelper.SKIP:
            self.org_ids = org_ids 
        if groups is not APIHelper.SKIP:
            self.groups = groups 
        self.state = state 
        self.notify_on_share = notify_on_share 
        self.show_walk_me = show_walk_me 
        self.analyst_onboarding_complete = analyst_onboarding_complete 
        self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        name = dictionary.get("name") if dictionary.get("name") else None
        display_name = dictionary.get("displayName") if dictionary.get("displayName") else None
        password = dictionary.get("password") if dictionary.get("password") else None
        visibility = dictionary.get("visibility") if dictionary.get("visibility") else 'DEFAULT'
        mail = dictionary.get("mail") if dictionary.get("mail") else APIHelper.SKIP
        org_ids = dictionary.get("orgIds") if dictionary.get("orgIds") else APIHelper.SKIP
        groups = None
        if dictionary.get('groups') is not None:
            groups = [GroupNameAndIDInput.from_dictionary(x) for x in dictionary.get('groups')]
        else:
            groups = APIHelper.SKIP
        state = dictionary.get("state") if dictionary.get("state") else 'ACTIVE'
        notify_on_share = dictionary.get("notifyOnShare") if dictionary.get("notifyOnShare") else 'true'
        show_walk_me = dictionary.get("showWalkMe") if dictionary.get("showWalkMe") else 'true'
        analyst_onboarding_complete = dictionary.get("analystOnboardingComplete") if dictionary.get("analystOnboardingComplete") else 'false'
        mtype = dictionary.get("type") if dictionary.get("type") else 'LOCAL_USER'
        # Return an object of this model
        return cls(name,
                   display_name,
                   password,
                   visibility,
                   mail,
                   org_ids,
                   groups,
                   state,
                   notify_on_share,
                   show_walk_me,
                   analyst_onboarding_complete,
                   mtype)
