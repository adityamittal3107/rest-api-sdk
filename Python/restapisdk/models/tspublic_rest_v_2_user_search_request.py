# -*- coding: utf-8 -*-

"""
restapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from restapisdk.api_helper import APIHelper
from restapisdk.models.group_name_and_id_input import GroupNameAndIDInput


class TspublicRestV2UserSearchRequest(object):

    """Implementation of the 'Tspublic Rest V2 User Search Request' model.

    TODO: type model description here.

    Attributes:
        output_fields (list of string): Array of field names that need to be
            included in the response.
        name (string): Name of the user.
        id (string): The GUID of the user account to query
        display_name (string): A unique display name string for the user,
            usually their first and last name.
        visibility (SearchUsersVisibilityEnum): Visibility of the user.    The
            visibility attribute is set to DEFAULT when creating a user.
            Setting this to DEFAULT makes a user visible to other users and
            user groups, and thus allows them to share objects
        mail (string): email of the user account
        groups (list of GroupNameAndIDInput): A JSON array of group names or
            GUIDs or both. When both are given then id is considered
        privileges (list of SearchUsersPrivilegesEnum): A JSON array of
            privileges assigned to the user
        state (SearchUsersStateEnum): Status of user account. acitve or
            inactive.
        notify_on_share (SearchUsersNotifyOnShareEnum): User preference for
            receiving email notifications when another ThoughtSpot user shares
            answers or pinboards.
        show_walk_me (SearchUsersShowWalkMeEnum): The user preference for
            revisiting the onboarding experience.
        analyst_onboarding_complete
            (SearchUsersAnalystOnboardingCompleteEnum): ThoughtSpot provides
            an interactive guided walkthrough to onboard new users. The
            onboarding experience leads users through a set of actions to help
            users get started and accomplish their tasks quickly.    The users
            can turn off the Onboarding experience and access it again when
            they need assistance with the ThoughtSpot UI.
        mtype (SearchUsersTypeEnum): Type of user. LOCAL_USER indicates that
            the user is created locally in the ThoughtSpot system.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "output_fields": 'outputFields',
        "name": 'name',
        "id": 'id',
        "display_name": 'displayName',
        "visibility": 'visibility',
        "mail": 'mail',
        "groups": 'groups',
        "privileges": 'privileges',
        "state": 'state',
        "notify_on_share": 'notifyOnShare',
        "show_walk_me": 'showWalkMe',
        "analyst_onboarding_complete": 'analystOnboardingComplete',
        "mtype": 'type'
    }

    _optionals = [
        'output_fields',
        'name',
        'id',
        'display_name',
        'visibility',
        'mail',
        'groups',
        'privileges',
        'state',
        'notify_on_share',
        'show_walk_me',
        'analyst_onboarding_complete',
        'mtype',
    ]

    def __init__(self,
                 output_fields=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 display_name=APIHelper.SKIP,
                 visibility=APIHelper.SKIP,
                 mail=APIHelper.SKIP,
                 groups=APIHelper.SKIP,
                 privileges=APIHelper.SKIP,
                 state=APIHelper.SKIP,
                 notify_on_share=APIHelper.SKIP,
                 show_walk_me=APIHelper.SKIP,
                 analyst_onboarding_complete=APIHelper.SKIP,
                 mtype=APIHelper.SKIP):
        """Constructor for the TspublicRestV2UserSearchRequest class"""

        # Initialize members of the class
        if output_fields is not APIHelper.SKIP:
            self.output_fields = output_fields 
        if name is not APIHelper.SKIP:
            self.name = name 
        if id is not APIHelper.SKIP:
            self.id = id 
        if display_name is not APIHelper.SKIP:
            self.display_name = display_name 
        if visibility is not APIHelper.SKIP:
            self.visibility = visibility 
        if mail is not APIHelper.SKIP:
            self.mail = mail 
        if groups is not APIHelper.SKIP:
            self.groups = groups 
        if privileges is not APIHelper.SKIP:
            self.privileges = privileges 
        if state is not APIHelper.SKIP:
            self.state = state 
        if notify_on_share is not APIHelper.SKIP:
            self.notify_on_share = notify_on_share 
        if show_walk_me is not APIHelper.SKIP:
            self.show_walk_me = show_walk_me 
        if analyst_onboarding_complete is not APIHelper.SKIP:
            self.analyst_onboarding_complete = analyst_onboarding_complete 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        output_fields = dictionary.get("outputFields") if dictionary.get("outputFields") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        display_name = dictionary.get("displayName") if dictionary.get("displayName") else APIHelper.SKIP
        visibility = dictionary.get("visibility") if dictionary.get("visibility") else APIHelper.SKIP
        mail = dictionary.get("mail") if dictionary.get("mail") else APIHelper.SKIP
        groups = None
        if dictionary.get('groups') is not None:
            groups = [GroupNameAndIDInput.from_dictionary(x) for x in dictionary.get('groups')]
        else:
            groups = APIHelper.SKIP
        privileges = dictionary.get("privileges") if dictionary.get("privileges") else APIHelper.SKIP
        state = dictionary.get("state") if dictionary.get("state") else APIHelper.SKIP
        notify_on_share = dictionary.get("notifyOnShare") if dictionary.get("notifyOnShare") else APIHelper.SKIP
        show_walk_me = dictionary.get("showWalkMe") if dictionary.get("showWalkMe") else APIHelper.SKIP
        analyst_onboarding_complete = dictionary.get("analystOnboardingComplete") if dictionary.get("analystOnboardingComplete") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        # Return an object of this model
        return cls(output_fields,
                   name,
                   id,
                   display_name,
                   visibility,
                   mail,
                   groups,
                   privileges,
                   state,
                   notify_on_share,
                   show_walk_me,
                   analyst_onboarding_complete,
                   mtype)
